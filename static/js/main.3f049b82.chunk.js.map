{"version":3,"sources":["components/convertInput.js","utils/convertToRoman.js","utils/convertToNumeral.js","App.js","index.js"],"names":["ConvertInput","props","className","onChange","maxLength","value","placeholder","convertToRoman","num","numberArr","RomanArr","result","findElement","e","nextHighest","find","push","indexOf","join","convertToNumeral","romanNumber","toUpperCase","romanNumList","corresp","index","rn","parseInt","replace","App","useState","romanValue","setRomanValue","numeralValue","setNumeralValue","name","target","val","resultRoman","console","log","handleUserKeyPress","resultNumeral","handleUserKeyPressRoman","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAceA,MAZf,SAAsBC,GACpB,OACE,uBACEC,UAAU,mBACVC,SAAUF,EAAME,SAChBC,UAAU,IACVC,MAAOJ,EAAMI,MACbC,YAAaL,EAAMK,eC2BRC,MApCjB,SAAwBC,GACpB,IAAIC,EAAY,CAAC,IAAM,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAChEC,EAAW,CACb,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,KAEEC,EAAS,GAEPC,EAAc,SAAAC,GAClB,OAAOA,GAAKL,GAEd,GAAGA,EAAM,KACP,MAAO,oCAET,KAAOA,EAAM,GAAG,CACd,IAAIM,EAAcL,EAAUM,KAAKH,GAEjCD,EAAOK,KAAKN,EAASD,EAAUQ,QAAQH,KACvCN,GAAOM,EAIT,OAFgBH,EAAOO,KAAK,KCDfC,MA9BjB,SAA0BC,GACtBA,EAAcA,EAAYC,cAC1B,IAAMC,EAAe,CACnB,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,KAEIC,EAAU,CAAC,IAAK,IAAM,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,GAChEC,EAAQ,EACVhB,EAAM,EACR,IAAK,IAAIiB,KAAMH,EAEb,IADAE,EAAQJ,EAAYH,QAAQK,EAAaG,KACxB,GAAVD,GACLhB,GAAOkB,SAASH,EAAQE,IAExBD,GADAJ,EAAcA,EAAYO,QAAQL,EAAaG,GAAK,MAChCR,QAAQK,EAAaG,IAG7C,OAAOjB,GCYIoB,MAlCf,WACE,MAAoCC,qBAApC,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAwCF,qBAAxC,mBAAOG,EAAP,KAAqBC,EAArB,KAcA,OACE,sBAAK/B,UAAU,OAAf,UACE,yDACA,cAAC,EAAD,CACEgC,KAAK,UACL/B,SAAU,SAAAU,GAAOoB,EAAgBpB,EAAEsB,OAAO9B,OAjBrB,SAAC+B,GAC1B,IAAIC,EAAc9B,EAAe6B,GACjCL,EAAcM,GACdC,QAAQC,IAAIT,GAc0CU,CAAmB3B,EAAEsB,OAAO9B,QAC9EA,MAAO2B,EACP1B,YAAY,wBACd,cAAC,EAAD,CACE4B,KAAK,QACL/B,SAAU,SAAAU,GAAOkB,EAAelB,EAAEsB,OAAO9B,MAAOgB,eAhBtB,SAACe,GAC/B,IAAIK,EAAgBtB,EAAiBiB,GACrCH,EAAgBQ,GAChBH,QAAQC,IAAIP,GAawDU,CAAwB7B,EAAEsB,OAAO9B,QACjGA,MAAOyB,EACPxB,YAAY,0BC5BpBqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.3f049b82.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ConvertInput(props) {\n  return (\n    <input\n      className=\"container__input\"\n      onChange={props.onChange}\n      maxLength=\"4\"\n      value={props.value}\n      placeholder={props.placeholder}\n    />\n  );\n}\n\nexport default ConvertInput;\n","function convertToRoman(num) {\n    let numberArr = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    let RomanArr = [\n      \"M\",\n      \"CM\",\n      \"D\",\n      \"CD\",\n      \"C\",\n      \"XC\",\n      \"L\",\n      \"XL\",\n      \"X\",\n      \"IX\",\n      \"V\",\n      \"IV\",\n      \"I\"\n    ];\n    let result = [];\n  \n    const findElement = e => {\n      return e <= num;\n    };\n    if(num > 3999){\n      return \"Enter a number between 1 and 3999\";\n    }\n    while (num > 0) {\n      let nextHighest = numberArr.find(findElement);\n  \n      result.push(RomanArr[numberArr.indexOf(nextHighest)]);\n      num -= nextHighest;\n    }\n    let newResult = result.join(\"\");\n  \n    return newResult;\n  }\n  \n  export default convertToRoman;\n  ","function convertToNumeral(romanNumber) {\n    romanNumber = romanNumber.toUpperCase();\n    const romanNumList = [\n      \"CM\",\n      \"M\",\n      \"CD\",\n      \"D\",\n      \"XC\",\n      \"C\",\n      \"XL\",\n      \"L\",\n      \"IX\",\n      \"X\",\n      \"IV\",\n      \"V\",\n      \"I\"\n    ];\n    const corresp = [900, 1000, 400, 500, 90, 100, 40, 50, 9, 10, 4, 5, 1];\n    let index = 0,\n      num = 0;\n    for (let rn in romanNumList) {\n      index = romanNumber.indexOf(romanNumList[rn]);\n      while (index != -1) {\n        num += parseInt(corresp[rn]);\n        romanNumber = romanNumber.replace(romanNumList[rn], \"-\");\n        index = romanNumber.indexOf(romanNumList[rn]);\n      }\n    }\n    return num;\n  }\n  export default convertToNumeral;\n  ","import './App.css';\nimport ConvertInput from \"./components/convertInput\";\nimport convertToRoman from \"./utils/convertToRoman\";\nimport convertToNumeral from \"./utils/convertToNumeral\";\nimport { useState} from 'react';\n\nfunction App() {\n  const [romanValue, setRomanValue] = useState();\n  const [numeralValue, setNumeralValue] = useState();\n\n  const handleUserKeyPress = (val) => {\n    let resultRoman = convertToRoman(val);\n    setRomanValue(resultRoman);\n    console.log(romanValue);\n  }\n\n  const handleUserKeyPressRoman = (val) => {\n    let resultNumeral = convertToNumeral(val);\n    setNumeralValue(resultNumeral);\n    console.log(numeralValue);\n  }\n\n  return (\n    <div className=\"main\">\n      <h1>Roman Numeral Converter</h1>\n      <ConvertInput\n        name=\"numeral\"\n        onChange={e => { setNumeralValue(e.target.value); handleUserKeyPress(e.target.value) }}\n        value={numeralValue}\n        placeholder=\"Enter Numeric value\" />\n      <ConvertInput\n        name=\"roman\"\n        onChange={e => { setRomanValue((e.target.value).toUpperCase()); handleUserKeyPressRoman(e.target.value) }}\n        value={romanValue}\n        placeholder=\"Enter Roman value\" />\n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}